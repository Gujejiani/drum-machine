{"version":3,"sources":["Drumpad/Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["data","id","letter","src","music","map","x","KeyboardEvent","key","console","log","Drumpad","props","handleKeyPress","event","state","hitIndex","play","pause","soundOn","bind","sudio","Audio","handleKeyDown","this","setState","parseInt","target","getAttribute","index","url","audio","className","onKeyPress","onClick","onKeyDown","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b7b463d.chunk.js","sourcesContent":["\r\nimport React, {Component, useEffect } from 'react';\r\nimport './Drumpad.css';\r\n\r\nconst data = [\r\n    {id: ''},\r\n    { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\r\n    { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\r\n    { id: 'bongo', letter: 'E', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\r\n    { id: 'tom tom', letter: 'A', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\r\n    { id: 'bass 3', letter: 'S', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\r\n    { id: 'shotgun', letter: 'D', src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\r\n    { id: 'high hat', letter: 'Z', src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\r\n    { id: 'Side-Stick', letter: 'X', src: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3' },\r\n    { id: 'Snare', letter: 'C', src: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'  },\r\n  ]\r\n\r\n \r\nvar music =  data.map((x)=>{\r\n \r\n\r\n    return x.id\r\n\r\n\r\n\r\n})\r\n\r\nconst event = new KeyboardEvent('keypress', {\r\n  key: 'enter'\r\n  \r\n});\r\n\r\n\r\n\r\n\r\nconsole.log(music)\r\n\r\n\r\n\r\nclass Drumpad extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        //markdown: initialState\r\n    hitIndex: 0,\r\n    play: false,\r\n    pause: true\r\n        };\r\n        this.soundOn = this.soundOn.bind(this)\r\n   \r\n        this.handleKeyPress=this.handleKeyPress.bind(this)\r\n\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n        this.sudio = new Audio( data[3].src);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n      };\r\n\r\n \r\n\r\n      \r\nsoundOn(event){\r\n    console.log('am clicked')\r\nthis.setState({\r\n//hit: data.src,\r\n    play: true,\r\n      pause: false,\r\n      hitIndex: parseInt(event.target.getAttribute('id'))\r\n      \r\n})\r\nvar index =  parseInt(event.target.getAttribute('id'))\r\n\r\n\r\nconsole.log( parseInt(this.state.hitIndex))\r\n\r\nthis.url = data[index].src;\r\nthis.audio = new Audio(this.url);\r\nthis.audio.play();\r\n};\r\n\r\n\r\n\r\n\r\n\r\nhandleKeyPress = (event) => {\r\n    console.log(\"ss \" + event.key)\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n  console.log(\"sss \" + event.key)\r\n}\r\n\r\nrender(){\r\n    \r\n    return(\r\n   <div>\r\n<button className=\"drum-pad\" id='1' onKeyPress={ this.handleKeyPress} onClick={this.soundOn} >Q <audio src='' className='clip' id=\"Q\" onClick={this.soundOn} ></audio> </button>\r\n<button className=\"drum-pad\"  id='2' onKeyDown={this.handleKeyDown} onClick={this.soundOn} >W  <audio src='' className='clip' id='W' ></audio> </button>\r\n<button  className=\"drum-pad\" id='3' onClick={this.soundOn} >E <audio src='' className='clip' id='E' ></audio></button>\r\n<button className=\"drum-pad\" id='4' onClick={this.soundOn} >A <audio src='' className='clip' id='A' ></audio></button>\r\n<button className=\"drum-pad\" id='5' onClick={this.soundOn} >S <audio src = '' className='clip' id='S' ></audio></button>\r\n<button className=\"drum-pad\" id='6'onClick={this.soundOn} >D <audio src='' className='clip' id='D' ></audio> </button>\r\n<button className=\"drum-pad\" id='7'onClick={this.soundOn} >Z <audio src='' className='clip' id='Z' ></audio></button>\r\n<button className=\"drum-pad\" id='8'onClick={this.soundOn} >X <audio src='' className='clip' id='X' ></audio></button>\r\n<button className=\"drum-pad\" id='9'onClick={this.soundOn} >C <audio src='' className='clip' id='C'></audio></button>\r\n<div id=\"namesBack\" ></div>\r\n    <p id=\"names\" > {data[this.state.hitIndex].id} </p>\r\n\r\n   </div>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Drumpad","import React, {Component} from 'react';\n\nimport './App.css';\nimport Drumpad from './Drumpad/Drumpad';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    //markdown: initialState\n\n    };\n    //this.handleChange = this.handleChange.bind(this)\n  }\n\n\n\nrender(){\n  return (\n    <div className=\"App\"  id=\"drum-machine\">\n  <div id=\"display\">\n\n<Drumpad/>\n</div>\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}