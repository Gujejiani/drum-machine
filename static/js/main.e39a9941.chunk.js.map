{"version":3,"sources":["Drumpad/Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["data","id","letter","src","map","x","console","log","Drumpad","props","state","hitIndex","play","pause","handleKeyPress","bind","document","addEventListener","this","removeEventListener","e","keyCode","url","audio","Audio","getElementById","pad","setState","target","onClick","type","className","React","Component","k","App","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e39a9941.chunk.js","sourcesContent":["\r\nimport React, {Component, useEffect } from 'react';\r\nimport './Drumpad.css';\r\n\r\nconst data = [\r\n    {id: ''},\r\n    { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\r\n    { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\r\n    { id: 'bongo', letter: 'E', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\r\n    { id: 'tom tom', letter: 'A', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\r\n    { id: 'bass 3', letter: 'S', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\r\n    { id: 'shotgun', letter: 'D', src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\r\n    { id: 'high hat', letter: 'Z', src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\r\n    { id: 'Side-Stick', letter: 'X', src: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3' },\r\n    { id: 'Snare', letter: 'C', src: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'  },\r\n  ]\r\n\r\n\r\n\r\nvar music =  data.map((x)=>{\r\n\r\n    return x.id\r\n})\r\n\r\nconsole.log(typeof data[1].letter)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Drumpad extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        //markdown: initialState\r\n    hitIndex: \"\",\r\n    play: false,\r\n    pause: true\r\n        };\r\n  \r\n   \r\n        this.handleKeyPress=this.handleKeyPress.bind(this)\r\n\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n    \r\n     \r\n        this.play = this.play.bind(this);\r\n    \r\n      };\r\n\r\n \r\n\r\n      \r\n\r\n\r\ncomponentDidMount(){\r\ndocument.addEventListener(\"keydown\", this.handleKeyPress)\r\n}\r\n\r\n\r\ncomponentWillMount(){\r\ndocument.removeEventListener(\"keydown\",this.handleKeyPress)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nhandleKeyPress(e) {\r\n  if (e.keyCode == 81) {\r\n\r\n\r\n\r\n    \r\n    this.url = data[1].src;\r\n    this.audio = new Audio(this.url);\r\n    //this.audio.play();\r\n\r\n\r\n   \r\n    console.log(\"ffff\")\r\n  }else if(e.keyCode == 87){\r\n    this.url = data[2].src;\r\n    this.audio = new Audio(this.url);\r\n    //this.audio.play();\r\n  }\r\n}\r\n \r\n \r\n\r\n  play(e) {\r\n    const sound = document.getElementById(this.props.pad.letter);\r\n\r\n\r\n\r\n\r\n//console.log(name[this.props.pad.k].id)\r\n  sound.play();\r\n\r\nthis.setState({\r\nhitIndex: e.target.id\r\n});\r\n\r\n\r\n\r\n console.log(this.state.hitIndex)\r\n}\r\n\r\n\r\nrender(){\r\n  \r\n  \r\n\r\n\r\n\r\n    return(\r\n\r\n\r\n\r\n <button onClick={this.play} type=\"button\" className=\"drum-pad\" id={this.props.pad.id}>{this.props.pad.letter} \r\n        <audio className=\"clip\" src={this.props.pad.src} id={this.props.pad.letter} />\r\n      </button>\r\n      \r\n\r\n\r\n     \r\n\r\n   \r\n\r\n  \r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Drumpad","import React, {Component} from 'react';\n\nimport './App.css';\nimport Drumpad from './Drumpad/Drumpad';\n\n\nconst data = [\n  \n  { id: 'snare', letter: 'Q', k: 0, src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\n  { id: 'bass 1', letter: 'W',k: 1, src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\n  { id: 'bongo', letter: 'E', k: 2, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\n  { id: 'tom tom', letter: 'A', k: 3, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\n  { id: 'bass 3', letter: 'S', k: 4, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\n  { id: 'shotgun', letter: 'D', k: 5, src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\n  { id: 'high hat', letter: 'Z', k: 6, src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\n  { id: 'Side-Stick', letter: 'X',k: 7, src: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3' },\n  { id: 'Snare', letter: 'C',k: 8, src: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'  },\n]\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    //markdown: initialState\n\n    };\n    //this.handleChange = this.handleChange.bind(this)\n  }\n\n\n\nrender(){\n  return (\n    <div className=\"App\"  id=\"drum-machine\">\n  <div id=\"display\">\n\n  { data.map((pad) => {\n\n          return(\n\n            <Drumpad key={pad.letter} pad={pad} />\n\n            \n          );\n\n            \n\n        })}\n<div></div>\n\n\n\n</div>\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}